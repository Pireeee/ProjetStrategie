@startuml
skinparam groupInheritance 2

class Main {
  -Carte carte
  -List<UniteAbstract> listeUnite
  -Inventaire inventaire
  -int tour

  +Main()
  +void run()
  +void main()
  +void question()
  +void boucle()
  +void clearConsole()
  +void tour()
}

class Inventaire {
  -Map<ResourceType, Integer> resources
  -{static} Inventory instance

  +{static} Inventory getInstance()
  +void ajouterRessource( type,quantite)
  +void retirerRessource( type,quantite)
  +boolean possedeRessource( type,quantite)
  +int get( type)
  +void afficher()
}

class Carte {
  -int largeur
  -int hauteur
  -Case[][] cases
  -Carte instance;

  +Carte getInstance()
  +Carte(int largeur, int hauteur)
  +void afficher()
  +void travailler()
  +void deplacerUnite()
  +Case getCase(x,y)
  +int getX()
  +int getY()
}

class Case {
  -int x
  -int y
  -int Ressource ressource
  -UniteAbstract unite

  +Case(x,y)
  +void ConsomerRessource(outil);
  +void afficher()
  +int getX()
  +int getY()
  +Ressource getRessource()
  +UniteAbstract getUnite()
  +UniteAbstract setUnite(unite)
}

enum TypeResource {
  +{field} BOIS (50,"B","du bois")
  +{field} OR (50,"O","de l'or")
  +{field} PIERRE (50,"P","de la pierre")
  +{field} NOURRITURE (50,"N","de la nourriture")

  -int tailleMax
  -String symbole
  -String recolte

  +TypeRessource(float chance, int tailleMax)
  +int getTailleMax()
  +String getSymbole()
  +String getRecolte()
}
enum TypeTravail {
  +{field} FERMIER (NOURRITURE)
  +{field} BUCHEROON (BOIS)
  +{field} MINEUR (OR,PIERRE)

  -{final} TypeRessource[] typeRessource

  +TypeTravail(TypeRessource)
  +boolean estBonOutil(TypeRessource)
  +TypeRessource[] getTypeRessource()
}
abstract class UniteAbstract{
  -String nom
  -int vitesse
  -int cout
  -Case position


  +{abstract} void deplacer()
  +{abstract} void afficher()
  +{abstract} void travailler()
  +void seDeplacer(position)
  +void ConsomerNourriture(cout)
  +Case getPosition()
  +void setPosition(position)
  +int getX()
  +int getY()
  +int getVitesse()
  +void setVitesse(vitesse)
  +void teleporter(x,y)
}

class UniteGroupe extends UniteAbstract {
  -List<UniteAbstract> unites

  +void ConsomerNourriture(cout)
  +void travailler()
  +void teleporter(x,y)
  +void deplacer()
}

class UniteSimple extends UniteAbstract {
   boolean expert
   Outil outil;
   int exp;

   +UniteSimple(nom, vitesse, cout, position)
   +void ConsomerNourriture(cout)
   +void travailler()
   +void deplacer()

}

class UniteMonte extends UniteAbstract {
  -UniteSimple unite

  +void seDeplacer()
}

class Outil{
  -int niveau
  -TypeTravail type

  Outil(type)
  +boolean estBonOutil(TypeRessource)
}
class Ressource{
  -TypeRessource type
  -int quantite

  Ressource(type)
  +int getQuantite()
  +TypeRessource getType()
}

@enduml